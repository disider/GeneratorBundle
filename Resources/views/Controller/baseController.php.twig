<?php

namespace {{ namespace }}\Controller\Base;

{% block use_statements %}
use Symfony\Component\HttpFoundation\Request;
use Diside\GeneratorBundle\Form\Processor\DefaultFormProcessor;
use Diside\GeneratorBundle\Controller\BaseController;
use {{ namespace }}\Entity\{{ entity }};
{% if filters %}
use {{ namespace }}\Form\{{ entity }}FilterForm;
{% endif %}
{% endblock use_statements %}

{% block class_definition %}
class Base{{ entity }}Controller extends BaseController
{% endblock class_definition %}
{
{% block class_body %}

    protected function indexAction(Request $request)
    {
    {% if filters %}
        return $this->buildPaginationWithFilter(
            $request,
            new {{ entity }}FilterForm(),
            $this->get('{{ route_prefix }}_repository')->findAllQuery(),
            $this->container->getParameter('default_crud_page_size'));
    {% else %}
        return $this->buildPagination(
            $request,
            $this->get('brand_repository')->findAllQuery(),
            $this->container->getParameter('default_crud_page_size'));
    {% endif %}
    }

    protected function newAction(Request $request)
    {
        return $this->processForm($request, new {{ entity }}());
    }

    protected function editAction(Request $request, {{ entity }} $entity)
    {
         return $this->processForm($request, $entity);
    }

    protected function deleteAction({{ entity }} $behaviorRule)
    {
        $this->get('{{ route_prefix|lower }}_repository')->delete($behaviorRule);
        $this->addFlash('success', '{{ route_prefix }}.flash.deleted');

        return $this->redirectToRoute('{{ route_prefix|pluralize }}');
    }

    protected function processForm(Request $request, {{ entity }} $entity = null)
    {
        $processor = $this->get('{{ route_prefix }}_form_processor');

        $processor->process($request, $entity);

        if ($processor->isValid()) {
            $this->addFlash('success', $processor->isNew() ? '{{ route_prefix }}.flash.created' : '{{ route_prefix }}.flash.updated');

            if($processor->isRedirectingTo(DefaultFormProcessor::REDIRECT_TO_LIST))
                return $this->redirectToRoute('{{ route_prefix|pluralize }}');

            return $this->redirectToRoute('{{ route_prefix }}_edit', array('id' => $processor->getData()->getId()));
        }

        $form = $processor->getForm();

        return array(
            'form' => $form->createView()
        );
    }

{% endblock class_body %}
}
