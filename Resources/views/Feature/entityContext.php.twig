<?php

namespace {{ namespace }}\Features\Context;

use Behat\Gherkin\Node\TableNode;
use {{ namespace }}\Entity\{{ entity }};

class {{ entity }}Context extends BaseSubContext
{

    /**
     * @Given /^there is a {{ entity_name }}:$/
     * @Given /^there are {{ entity_name|pluralize }}:$/
     */
    public function thereAre{{ entity|pluralize }}(TableNode $table)
    {
        $repository = $this->getContainer()->get('{{ route_prefix }}_repository');

        foreach ($table->getHash() as $values) {
            $entity = $this->getEntityFromTable($values);
            $repository->save($entity);
        }
    }

    /**
     * @Given /^there are (\d+) {{ entity_name|pluralize }} with:$/
     */
    public function thereAre{{ entity|pluralize }}With($number, TableNode $table)
    {
        $repository = $this->getContainer()->get('{{ entity_name }}_repository');

        $values = $table->getHash()[0];

        for ($i=0; $i<$number; $i++){
            $entity = $this->getEntityFromTable($values);
            $repository->save($entity);
        }
    }

    protected function getEntityFromTable($values)
    {
        $entity= new {{ entity }}();

        {%- for field in fields %}
            {% set method = '' %}
            {% set defaultValue = '' %}
            {% if field.type == 'boolean' %}
                {% set method = 'Bool' %}
                {% set defaultValue = false %}
            {% elseif field.type == 'integer' %}
                {% set method = 'Int' %}
                {% set defaultValue = 3 %}
            {% elseif field.type == 'float' %}
                {% set method = 'Float' %}
                {% set defaultValue = 2.0 %}
            {% elseif field.type == 'date' or field.type == 'datetime' %}
                {% set method = 'Date' %}
                {% set defaultValue = '10/10/2015 00:00:00' %}
            {% endif %}

        $entity->set{{ field.name[:1]|capitalize ~ field.name[1:] }}($this->get{{ method }}Value($values, '{{ field.name }}', '{{ defaultValue }}'));

        {%- endfor %}
        return $entity;
    }
}
