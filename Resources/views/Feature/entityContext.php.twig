<?php

namespace {{ namespace }}\Features\Context;

use Behat\Gherkin\Node\TableNode;
use {{ namespace }}\Entity\{{ entity }};

class {{ entity }}Context extends BaseMinkContext
{

    /**
     * @Given /^there is a {{ entity_name }}:$/
     * @Given /^there are {{ entity_name|pluralize }}:$/
     */
    public function thereAre{{ entity|pluralize }}(TableNode $table)
    {
        $repository = $this->getContainer()->get('{{ route_prefix }}_repository');

        foreach ($table->getHash() as $values) {
            $entity = $this->getEntityFromTable($values);
            $repository->save($entity);
        }
    }

    /**
     * @Given /^there are (\d+) {{ entity_name|pluralize }} with:$/
     */
    public function thereAre{{ entity|pluralize }}With($number, TableNode $table)
    {
        $repository = $this->getContainer()->get('{{ route_prefix }}_repository');

        $values = $table->getHash()[0];

        for ($i=0; $i<$number; $i++){
            $entity = $this->getEntityFromTable($values);
            $repository->save($entity);
        }
    }

    protected function getEntityFromTable($values)
    {
        $entity= new {{ entity }}();

        {%- for field in fields %}
            {%- if field.type == 'boolean' %}

        $value = $this->getBoolValue($values, '{{ field.name }}');
            {%- elseif field.type == 'integer' %}

        $value = $this->getIntValue($values, '{{ field.name }}', 3);
            {%- elseif field.type == 'float' %}

        $value = $this->getFloatValue($values, '{{ field.name }}', 2.0);
           {%- elseif field.type == 'date' or field.type == 'datetime' %}

        $value = $this->getDateValue($values, '{{ field.name }}', '10/10/2015 00:00:00');
            {%- else %}

        $value = $this->getValue($values, '{{ field.name }}');
            {%- endif %}

        $entity->set{{ field.name[:1]|capitalize ~ field.name[1:] }}($value);

        {%- endfor %}

        return $entity;
    }
}
